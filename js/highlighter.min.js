"use strict";class Highlighter extends Logger{highlight(e,t,n){try{return this._parse(e,t.start,t).map(({token:e,rule:t})=>{const r=t.name.split("."),i=Object.entries(n).filter(([e])=>e.split(".").every(e=>r.includes(e))).map(([,e])=>e);return i.length?i.reduce((e,t)=>t(e),e):n.default(e)}).join("")}catch(e){this._log(e)}}_parse(e,t,n,r=!1){try{if("string"==typeof t&&(t=n[t]),!t)return[];let i=e,s=0;const o=[];for(;;){const e=this._findToken(i,t,n);if(!e.length)break;if(e.forEach(e=>{const t={...e,index:s};i=i.substring(e.token.length),s+=e.token.length,o.push(t)}),r&&e.some(({rule:e})=>e.exit))break}return o.reduceRight((e,t)=>(t.rule.join&&e[0]&&e[0].rule===t.rule?e[0].token=t.token+e[0].token:e.unshift(t),e),[])}catch(e){this._log(e)}}_findToken(e,t,n){try{for(let r of t){const t=r.exp.exec(e);if(!t)continue;if(0!==t.index)continue;const[i]=t;return[{rule:r,token:i},...this._parse(e.substring(i.length),r.next,n,!0)]}return[]}catch(e){this._log(e)}}}